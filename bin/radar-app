#!/usr/bin/env ruby

$: << File.expand_path('../lib/', __FILE__)


require 'rubygems'
require 'bundler/setup'
require 'thor'

class RadarApp < Thor

  include Thor::Actions

  def self.source_root
    dir = File.dirname(__FILE__)
    "#{dir}/../templates"
  end

  desc 'new NAME', 'Creates a new project with the given name'
  method_option :alias => 'n'
  method_option :language, :type => :string, :aliases => '-l', :default => 'ruby',
                :desc => 'Choose the project language. Available options [Java, Ruby]'
  def new(project_name)
    if File.directory?(project_name.to_s)
      puts 'directory already exists'
      return
    end

    empty_directory project_name.to_s

    language = options[:language].downcase
    case language
      when 'ruby'
        new_ruby_project project_name
      when 'java'
        new_java_project project_name
      else
        puts 'language not available'
    end
  end

  desc 'server', 'Starts the app server'
  method_option :aliases => 's'
  def server
    require './analyzers_registry'
    RadarApp::Server.start
  end

  desc 'generate', 'generates an analyzer'
  method_option :alias => 'g'
  def generate(command, analyzer_name)
    case command.to_s.downcase
      when 'analyzer'
        generate_analyzer(analyzer_name) if command == 'analyzer'
      else
        puts 'invalid command'
    end
  end


  no_commands do
    def generate_analyzer(analyzer_name)
      file_name = "#{analyzer_name}.rb"
      copy_file 'analyzer.rb', file_name

      names = analyzer_name.split '_'
      class_name = ''
      names.each {|name| class_name = class_name + name.capitalize}
      gsub_file file_name, 'ClassName', class_name

      empty_directory 'spec' unless File.directory?('spec')
      spec_file_name = "spec/#{analyzer_name}_spec.rb"
      copy_file 'spec/analyzer_spec.rb', spec_file_name
      gsub_file spec_file_name, 'file_name', analyzer_name
      gsub_file spec_file_name, 'ClassName', class_name

      #append_to_file 'analyzers_registry.rb', "RadarApp::AnalyzerController.register_analyzer('#{class_name}', '#{class_name}')"
    end

    def new_ruby_project(project_name)
      copy_file 'Gemfile', "#{project_name}/Gemfile"
      copy_file 'analyzers_registry.rb', "#{project_name}/analyzers_registry.rb"
    end

    def new_java_project(project_name)
      lib_directory = "#{project_name.to_s}/lib"
      empty_directory lib_directory
      empty_directory "#{project_name.to_s}/src"

      download('http://repo2.maven.org/maven2/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar', lib_directory)
      download('http://repo2.maven.org/maven2/org/apache/httpcomponents/httpclient/4.2.5/httpclient-4.2.5.jar', lib_directory)
      download('http://repo2.maven.org/maven2/org/apache/httpcomponents/httpcore/4.2.4/httpcore-4.2.4.jar', lib_directory)
      download('http://repo2.maven.org/maven2/org/apache/thrift/libthrift/0.9.1/libthrift-0.9.1.jar', lib_directory)
      download('http://central.maven.org/maven2/log4j/log4j/1.2.16/log4j-1.2.16.jar', lib_directory)
      download('http://central.maven.org/maven2/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8.jar', lib_directory)
      download('http://central.maven.org/maven2/org/slf4j/slf4j-log4j12/1.5.8/slf4j-log4j12-1.5.8.jar', lib_directory)
    end

    def download(url, dir)
      File.join(dir, File.basename(url)).tap do |localpath|
        File.open(localpath, 'wb') do |localfile|
          begin
            Net::HTTP.get_response(URI.parse(url)) do |resp|
              puts "error downloading #{url}" if resp.code == '404'
              resp.read_body do |segment|
                localfile << segment
              end
            end
          rescue EOFError
            puts "error downloading #{url}"
          end
        end
      end
    end
  end

end

RadarApp.start